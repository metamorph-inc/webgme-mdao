/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Jan 03 2018 13:04:07 GMT-0600 (Central Standard Time).
 */

define(['css!./styles/DataflowWidget.css'], function () {
    'use strict';

    var DataflowWidget,
        WIDGET_CLASS = 'dataflow';

    DataflowWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this.counter = 0;
        this.connections = {};
        this.newConnections = [];
        this._logger.debug('ctor finished');
    };

    DataflowWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header
        // this._el.append('<h3>Dataflow Events:</h3>');

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    DataflowWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    DataflowWidget.prototype.addNode = function (desc) {
        this.nodes[desc.id] = desc;

        if (desc && desc.type === 'Component') {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            node.innerHTML = desc.name;
            desc.element = node;
            node.classList.add(desc.type);
            node.style.top = (80 + this.counter * 100) + 'px';
            node.style.left = (80 + this.counter * 100) + 'px';
            this.counter++;

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        } else if (desc && desc.type === 'Dataflow') {
            this.newConnections.push(desc);
        }
    };

    function getParentId(id) {
        return id.substr(0, id.lastIndexOf('/'));
    };

    function getConnectionsKey(connection) {
        var strip = getParentId;
        return strip(connection.srcId) + '__' + strip(connection.dstId);
    };

    DataflowWidget.prototype.territoryComplete = function () {
        var newConnections = this.newConnections;
        this.newConnections = [];
        newConnections.forEach((desc) => {
            var connection = this.connections[getConnectionsKey(desc)];
            if (connection === undefined) {
                connection = this.connections[getConnectionsKey(desc)] = {valueflows: []};
                connection.element = document.createElement('div');


                connection.element.classList.add(desc.type);
                var srcRect = this.nodes[getParentId(desc.srcId)].element.getBoundingClientRect();
                var dstRect = this.nodes[getParentId(desc.dstId)].element.getBoundingClientRect();
                var elRect = this._el.get(0).getBoundingClientRect();
                if (srcRect.top < dstRect.top) {
                    connection.element.classList.add('Dataflow_backward');
                    connection.element.style.top = (srcRect.bottom - elRect.top) + 'px';
                    connection.element.style.left = (srcRect.left - elRect.left + 50) + 'px';
                    connection.element.style.width = (dstRect.left - srcRect.left - 50) + 'px';
                    connection.element.style.height = (dstRect.top - srcRect.top - 30) + 'px';
                }
                else {
                    connection.element.classList.add('Dataflow_forward');
                    connection.element.style.top = (dstRect.top - elRect.top + 50) + 'px';
                    connection.element.style.left = (dstRect.right - elRect.left) + 'px';
                    connection.element.style.width = (srcRect.left - dstRect.left - 50) + 'px';
                    connection.element.style.height = (srcRect.top - dstRect.top - 50) + 'px';
                }
                this._el.append(connection.element);
            }
            this.nodes[desc.id].connection = connection;
            connection.valueflows.push(desc);
        });
    };

    DataflowWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        // this._el.append('<div>Removing node "' + desc.name + '"</div>');
        if (desc.element) {
            desc.element.remove();
        }
        if (desc.connection) {
            var index = desc.connection.valueflows.indexOf(desc);
            desc.connection.valueflows.splice(index, 1);
            if (desc.connection.valueflows.length === 0) {
                desc.connection.element.remove();
                delete this.connections[getConnectionsKey(desc)];
            }
        }
        delete this.nodes[gmeId];
    };

    DataflowWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this.nodes[desc.id].name = desc.name;
            desc = this.nodes[desc.id];
            if (desc.element) {
                desc.element.innerHTML = desc.name;
            }
            // this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    DataflowWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    DataflowWidget.prototype.onBackgroundDblClick = function () {
        // this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    DataflowWidget.prototype.destroy = function () {
    };

    DataflowWidget.prototype.onActivate = function () {
        this._logger.debug('DataflowWidget has been activated');
    };

    DataflowWidget.prototype.onDeactivate = function () {
        this._logger.debug('DataflowWidget has been deactivated');
    };

    return DataflowWidget;
});
