/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 2.16.0 from webgme on Thu Jan 11 2018 16:52:19 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'q'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    Q) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of MdaoConfigImport.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MdaoConfigImport.
     * @constructor
     */
    var MdaoConfigImport = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    MdaoConfigImport.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    MdaoConfigImport.prototype = Object.create(PluginBase.prototype);
    MdaoConfigImport.prototype.constructor = MdaoConfigImport;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    MdaoConfigImport.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject,
            currentConfig = self.getCurrentConfig(),
            configFileHash = currentConfig.config_file;

        // Using the logger.
        // self.logger.debug('This is a debug message.');
        // self.logger.info('This is an info message.');
        // self.logger.warn('This is a warning message.');
        // self.logger.error('This is an error message.');

        nodeObject = self.activeNode;
        var metaById = self.core.getAllMetaNodes(nodeObject);
        self.meta = {};
        Object.getOwnPropertyNames(metaById).forEach(function (id) {
          self.meta[self.core.getAttribute(metaById[id], 'name')] = metaById[id];
        });

        self.components = {};

        Q.ninvoke(self.blobClient, 'getMetadata', configFileHash)
          .then(function (configFileMetadata) {
            // TODO read zips
            return Q.ninvoke(self.blobClient, 'getObject', configFileHash)
              .then(function (mdao_config) {
                self.mdao_config = mdao_config;
              });
            }).then(function () {
              Object.getOwnPropertyNames(self.mdao_config.components).forEach(function (componentName) {
                var componentConfig = self.mdao_config.components[componentName];
                var component = self.core.createNode({
                  parent: nodeObject,
                  base: self.meta.Component
                });
                self.components[componentName] = {
                  inputs: {},
                  outputs: {},
                  node: component
                };
                self.core.setAttribute(component, 'name', componentName);
                self.core.setAttribute(component, 'type', componentConfig.type);

                var i = 0;
                Object.getOwnPropertyNames(componentConfig.parameters).forEach(function (parameterName) {
                  var parameterConfig = componentConfig.parameters[parameterName];
                  var input = self.core.createNode({
                    parent: component,
                    base: self.meta.Input
                  });
                  self.components[componentName].inputs[parameterName] = input;
                  self.core.setAttribute(input, 'name', parameterName);
                  self.core.setRegistry(input, 'position', {x: 70, y: 70 * i++});
                });
                i = 0;
                Object.getOwnPropertyNames(componentConfig.unknowns).forEach(function (unknownName) {
                  var parameterConfig = componentConfig.unknowns[unknownName];
                  var output = self.core.createNode({
                    parent: component,
                    base: self.meta.Output
                  });
                  self.components[componentName].outputs[unknownName] = output;
                  self.core.setAttribute(output, 'name', unknownName);
                  self.core.setRegistry(nodeObject, 'position', {x: 270, y: 70 * i++});
                });
              });
              Object.getOwnPropertyNames(self.mdao_config.components).forEach(function (componentName) {
                var componentConfig = self.mdao_config.components[componentName];
                Object.getOwnPropertyNames(componentConfig.parameters).forEach(function (parameterName) {
                  // todo read .source
                  var input = self.components[componentName].inputs[parameterName];
                  var sourceIds = componentConfig.parameters[parameterName].source;
                  var srcComponent = self.components[sourceIds[0]];
                  if (srcComponent === undefined) {
                    // TODO: import driver
                    return;
                  }
                  var src = srcComponent.outputs[sourceIds[1]];
                  var dataflow = self.core.createNode({
                    parent: nodeObject,
                    base: self.meta.Dataflow
                  });
                  self.core.setPointer(dataflow, 'src', src);
                  self.core.setPointer(dataflow, 'dst', input);
                });
              });

              self.save('MdaoConfigImport updated model.');
            }).then(function () {
              self.result.setSuccess(true);
              callback(null, self.result);
            }).catch(function (err) {
              callback(err, self.result);
            });
    };

    return MdaoConfigImport;
});
